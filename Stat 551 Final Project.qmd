---
title: "Stat 551 Final Project"
format: html
editor: visual
---

```{r}
library(readr)
library(tidyverse)
library(ggplot2)
library(tidymodels)
library(broom)
```

```{r}
# Read Data
MH <- read_csv(here::here("Student Mental health.csv"))
head(MH)

M_alc <- read_csv(here::here("student-mat.csv"))
head(M_alc)

P_alc <- read_csv(here::here("student-por.csv"))
head(P_alc)
```

#Mental Health Data
```{r}
# Data Cleaning
MH_clean <- MH %>% 
  mutate( Gender = as.factor(`Choose your gender`),
          Course = as.factor(`What is your course?`),
          Year = as.factor(`Your current year of Study`),
          CGPA = as.factor(`What is your CGPA?`),
          Marital_Status = as.factor(`Marital status`),
          Depression = as.factor(`Do you have Depression?`),
          Anxiety = as.factor(`Do you have Anxiety?`), 
          Panic_Attacks = as.factor(`Do you have Panic attack?`),
          Treatment = as.factor(`Did you seek any specialist for a treatment?`),
          Year = ifelse(Year == "year 1", 1,
                        ifelse(Year == "Year 1", 1,
                        ifelse(Year == "year 2", 2,
                        ifelse(Year == "Year 2", 2,
                        ifelse(Year == "year 3", 3,
                        ifelse(Year == "Year 3", 3,
                               ifelse(Year== "year 4", 4, 4))))))),
          
          GPA_midpoint = ifelse(CGPA == "0 - 1.99", 1,
                                ifelse(CGPA == "2.00 - 2.49", 2.25,
                                ifelse(CGPA == "2.50 - 2.99", 2.75,
                                ifelse(CGPA == "3.00 - 3.49", 3.25, 3.75))))
          )%>%
  dplyr::select(-Timestamp, -`Choose your gender`, -`What is your course?`, -`Your current year of Study`,
                -`What is your CGPA?`, -`Marital status`, -`Do you have Depression?`,
                -`Do you have Anxiety?`, -`Do you have Panic attack?`, 
                -`Did you seek any specialist for a treatment?`)


median_age <- median(MH_clean$Age, na.rm = TRUE)

missing <- which(is.na(MH_clean$Age))

MH_clean$Age[is.na(MH_clean$Age)] <- median(MH_clean$Age, na.rm = TRUE)
MH_clean


```
```{r}
MH_clean %>%
ggplot(aes(x = CGPA, fill = Anxiety)) +
  geom_bar(position = "fill") +
  labs(title = 'Proportions of Anxiety Status within GPA Categories',
       x = 'GPA Category', y = 'Proportion') +
  theme_minimal() 

MH_clean %>%
ggplot(aes(x = Gender, fill = Anxiety)) +
  geom_bar(position = "fill") +
  labs(title = 'Proportions of Anxiety Status across Gender',
       x = 'Gender', y = 'Proportion') +
  theme_minimal() 

MH_clean %>%
ggplot(aes(x = Year, fill = Anxiety)) +
  geom_bar(position = "fill") +
  labs(title = 'Proportions of Anxiety Status across Year in School',
       x = 'Year', y = 'Proportion') +
  theme_minimal()
```

```{r}
MH_clean %>%
ggplot(aes(x = CGPA, fill = Depression)) +
  geom_bar(position = "fill") +
  labs(title = 'Proportions of Depression Status within GPA Categories',
       x = 'GPA Category', y = 'Proportion') +
  theme_minimal() 

MH_clean %>%
ggplot(aes(x = Gender, fill = Depression)) +
  geom_bar(position = "fill") +
  labs(title = 'Proportions of Depression Status across Gender',
       x = 'Gender', y = 'Proportion') +
  theme_minimal() 

MH_clean %>%
ggplot(aes(x = Year, fill = Depression)) +
  geom_bar(position = "fill") +
  labs(title = 'Proportions of Depression Status across Year in School',
       x = 'Year', y = 'Proportion') +
  theme_minimal()
```

```{r}
MH_clean %>%
ggplot(aes(x = CGPA, fill = Panic_Attacks)) +
  geom_bar(position = "fill") +
  labs(title = 'Proportions of Panic Attack Status within GPA Categories',
       x = 'GPA Category', y = 'Proportion') +
  theme_minimal() 

MH_clean %>%
ggplot(aes(x = Gender, fill = Panic_Attacks)) +
  geom_bar(position = "fill") +
  labs(title = 'Proportions of Panic Attacks Status across Gender',
       x = 'Gender', y = 'Proportion') +
  theme_minimal()

MH_clean %>%
ggplot(aes(x = Year, fill = Panic_Attacks)) +
  geom_bar(position = "fill") +
  labs(title = 'Proportions of Panic Attacks Status across Year in School',
       x = 'Year', y = 'Proportion') +
  theme_minimal()
```

```{r}
rf_spec <- rand_forest(mtry = tune(), 
                       min_n = tune(), 
                       trees = 10) %>%
  set_engine("ranger") %>%
  set_mode("classification")

MH_cvs <- vfold_cv(MH_clean, v=10)

MH_recipe <- recipe(CGPA ~ ., data = MH_clean) %>%
  step_rm(Course)


rf_grid <- grid_regular(mtry(c(1,8)),
                        min_n(),
                        levels = 5
                        )  
rf_tree_wflow <- workflow() %>%
  add_recipe(MH_recipe) %>%
  add_model(rf_spec)

tree_grid_search1 <-
  tune_grid(
    rf_tree_wflow,
    resamples = MH_cvs,
    grid = rf_grid
  )


tuning_metrics_rf <- tree_grid_search1 %>% collect_metrics()

tuning_metrics_rf %>%
  filter(.metric == "accuracy") %>%
  arrange(desc(mean))
  
  #slice_max(mean)

tuning_metrics_rf %>%
  filter(.metric == "roc_auc") %>%
  slice_max(mean)


tuning_metrics_rf
```
```{r}
rf_spec <- rand_forest(mtry = tune(), 
                       min_n = tune(), 
                       trees = 10) %>%
  set_engine("ranger") %>%
  set_mode("regression")

MH_cvs <- vfold_cv(MH_clean, v=10)

MH_recipe <- recipe(GPA_midpoint ~ ., data = MH_clean) %>%
  step_rm(Course) %>%
  step_rm(CGPA)


rf_grid <- grid_regular(mtry(c(1,9)),
                        min_n(),
                        levels = 5
                        )  
rf_tree_wflow <- workflow() %>%
  add_recipe(MH_recipe) %>%
  add_model(rf_spec)

tree_grid_search1 <-
  tune_grid(
    rf_tree_wflow,
    resamples = MH_cvs,
    grid = rf_grid
  )


tuning_metrics_rf <- tree_grid_search1 %>% collect_metrics()

tuning_metrics_rf %>%
  filter(.metric == "rmse") %>%
  slice_min(mean)
  
  #slice_max(mean)

tuning_metrics_rf %>%
  filter(.metric == "rsq") %>%
  slice_max(mean)


tuning_metrics_rf
```

```{r}
MH_recipe1 <- recipe(CGPA ~ ., data = MH_clean) %>%
  step_rm(Course) %>%
  step_rm(GPA_midpoint)

tree_mod <- decision_tree() %>%
  set_engine("rpart") %>%
  set_mode("classification")

tree_wflow <- workflow() %>%
  add_recipe(MH_recipe1) %>%
  add_model(tree_mod)

tree_fit_1 <- tree_wflow %>%
  fit(MH_clean)

tree_fitted <- tree_fit_1 %>% 
  extract_fit_parsnip()

rpart.plot(tree_fitted$fit, roundint = FALSE)
```

```{r}
lin_reg_spec <- linear_reg() %>%
  set_mode("regression") %>%
  set_engine("lm")

MH_lm_fit <- lin_reg_spec %>%
  fit(GPA_midpoint ~ Depression + Anxiety +Panic_Attacks + Age + Gender + Year +Marital_Status + Treatment, data = MH_clean)

tidy(MH_lm_fit)

head(MH_clean)

```


#Alcohol Data 

```{r}
head(P_alc)

Alc_clean <- P_alc %>%
  mutate( School = as.factor(school),
          Sex = as.factor(sex),
          Final_Grade = G3,
          Parent_Living = as.factor(Pstatus),
          Failures = as.factor(failures),
          address = as.factor(address),
          Daily_Alc = as.factor(Dalc),
          Weekend_Alc = as.factor(Walc),
          guardian = as.factor(guardian),
          reason = as.factor(reason),
          schoolsup = as.factor(schoolsup),
          famsup = as.factor(famsup),
          paid = as.factor(paid),
          activities = as.factor(activities),
          nursery = as.factor(nursery),
          
          
    
  ) %>%
  dplyr::select( -school, -sex, -G3, -Pstatus, -failures, -Dalc, -Walc  )

head(Alc_clean)
```

```{r}
Alc_clean %>%
ggplot(aes(x = School, y= Final_Grade, fill=School)) +
  geom_boxplot() +
  labs(title = 'Final Grades Between Schools',
       x = 'School', y = 'Grade') +
  theme_minimal() 
```
```{r}
Alc_clean %>%
ggplot(aes(x = Weekend_Alc, y= Final_Grade, fill=Weekend_Alc)) +
  geom_boxplot() +
  labs(title = 'Final Grades Vs. Weekend Alcohol Consumption',
       x = 'Weekend Alcohol Consumption', y = 'Grade') +
  theme_minimal()
```


```{r}
Alc_clean %>%
ggplot(aes(x = Sex, fill = Weekend_Alc)) +
  geom_bar(position = "fill") +
  labs(title = 'Proportions of Alcohol Consumption on the Weekend across Gender',
       x = 'Gender', y = 'Proportion') +
  theme_minimal() 

Alc_clean %>%
ggplot(aes(x = Sex, fill = Daily_Alc)) +
  geom_bar(position = "fill") +
  labs(title = 'Proportions of Alcohol Consumption during the Week across Gender',
       x = 'Gender', y = 'Proportion') +
  theme_minimal() 

Alc_clean %>%
ggplot(aes(x = School, fill = Weekend_Alc)) +
  geom_bar(position = "fill") +
  labs(title = 'Proportions of Alcohol Consumption on the Weekend across Schools',
       x = 'School', y = 'Proportion') +
  theme_minimal() 
```

```{r}
Alc_clean %>%
ggplot(aes(x = Weekend_Alc, y= absences, fill=Weekend_Alc)) +
  geom_boxplot() +
  labs(title = 'Missed Class Vs. Weekend Alcohol Consumption',
       x = 'Weekend Alcohol Consumption', y = 'Missed Class') +
  theme_minimal()
```

```{r}
Alc_clean %>%
ggplot(aes(x = absences)) +
  geom_histogram() +
  labs(title = 'Distribution of Absences among Students',
       x = 'Absences', y = 'Proportion') +
  theme_minimal()
```


```{r}
Alc_clean %>%
ggplot(aes(x = Final_Grade, fill = "red4")) +
  geom_histogram() +
  labs(title = 'Distribution of Final Grades among Students',
       x = 'Final Grades', y = 'Proportion') +
  theme_minimal()
```
```{r}
head(Alc_clean)
```


```{r}
lin_reg_spec <- linear_reg() %>%
  set_mode("regression") %>%
  set_engine("lm")
  
Alc_lm_fit <- lin_reg_spec %>%
  fit(Final_Grade ~ age + Weekend_Alc + absences +goout +Failures + studytime, data = Alc_clean)

tidy(Alc_lm_fit)
```

```{r}
rf_spec <- rand_forest(mtry = tune(), 
                       min_n = tune(), 
                       trees = 10) %>%
  set_engine("ranger") %>%
  set_mode("regression")

Alc_cvs <- vfold_cv(Alc_clean, v=10)

Alc_recipe <- recipe(Final_Grade ~ ., data = Alc_clean)


rf_grid <- grid_regular(mtry(c(1,32)),
                        min_n(),
                        levels = 5
                        )  
rf_tree_wflow <- workflow() %>%
  add_recipe(Alc_recipe) %>%
  add_model(rf_spec)

tree_grid_search1 <-
  tune_grid(
    rf_tree_wflow,
    resamples = Alc_cvs,
    grid = rf_grid
  )


tuning_metrics_rf <- tree_grid_search1 %>% collect_metrics()

tuning_metrics_rf %>%
  filter(.metric == "rmse") %>%
  arrange(desc(mean))
  
  #slice_max(mean)

tuning_metrics_rf %>%
  filter(.metric == "rsq") %>%
  slice_max(mean)


tuning_metrics_rf
```

